services:
  mysql:
    container_name: barber-shop-mysql
    image: mysql:8.3.0
    restart: always
    environment:
      - MYSQL_TCP_PORT=3307
      - MYSQL_ROOT_PASSWORD=mysql
      - MYSQL_DATABASE=everydaydb
    ports:
      - "3307:3307"
    volumes:
      - db:/var/lib/mysql

  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    container_name: barber-shop-redis

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7080/health/ready"]
      interval: 15s
      timeout: 2s
      retries: 15
    command: ["start-dev", "--http-port", "7080"]
    ports:
      - "7080:7080"
    networks:
      - barber_app

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - barber_app

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    user: "0:0"
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LOG_DIRS: ./kafka  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
    volumes:
      - ./kafkaData-volume:/kafka  # Store Kafka logs on your local machine.
    networks:
      - barber_app
#    command: tail -f /dev/null
#  AdminMicroservice:
#    image: "barber_app/admin_microservice"
#    container_name: admin-ms
#    build:
#      context: /AdminMicroservice
#      dockerfile: Dockerfile
#    ports:
#      - "8081:8081"
#    deploy:
#      resources:
#        limits:
#          memory: 700m
#    restart: on-failure
#    environment:
#      MYSQL_URL: jdbc:mysql://localhost:3307
#      SERVICE_PORT: 8081
#    networks:
#      - barber_app

#  UserMicroservice:
#    image: "barber_app/user_microservice"
#    container_name: user-ms
#    build:
#      context: /UserApp
#      dockerfile: Dockerfile
#    ports:
#      - "8082:8082"
#    deploy:
#      resources:
#        limits:
#          memory: 700m
#    restart: on-failure
#    environment:
#      MYSQL_URL: jdbc:mysql://localhost:3307
#      SERVICE_PORT: 8082
#    networks:
#      - barber_app

networks:
  barber_app:
    driver: "bridge"

volumes:
  db:
  kafkaData-volume:
